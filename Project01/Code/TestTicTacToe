package project.Game;

import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.jupiter.api.Test;

class TestTicTacToe {
	 
	 private TicTacToeTest testClassInstance;
	 TicTacToe tc = new TicTacToe();
	 
	 @Before
		public void setUp() throws Exception {
			testClassInstance = new TicTacToeTest();
		}

	 @After
		public void tearDown() throws Exception {
			testClassInstance = null;
		}
	
	@Test
	public void testIsWin() {
		
		Scanner sc = new Scanner(System.in);
		int x = sc.nextInt();
		int y = sc.nextInt();
		
		assertTrue(tc.isWin());
		
	}
	
	@Test
	public void testPutSignConditionOne() {
		
		assertEquals("Invalid board position", tc.putSign(4, -2));
		
	}
	
	@Test
	public void testPutSignConditionTwo() {
		
		TicTacToe t = new TicTacToe();
		t.putSign(2,1);
		assertEquals("Board position occupied", tc.putSign(2, 1));
		
		
	} 
	
	@Test
	public void testPutSignConditionThree() {
		assertEquals(2, tc.putSign(1, 2)); 
		
	}
	
	
	
	@Test
	public void testDisplayWinnerConditionOne() {
		int X= 1;
		assertNotNull(tc.isWin(X));
	}
	
	
	@Test
	public void testDisplayWinnerConditionTwo() {
		int O= -1;
		assertNotNull(tc.isWin(O));
	}
	
	
	
	@Test
        public void testIsWinColumnOne() {
	int O=-1;
	int[][] board = new int[3][3];
	board[0][0]= O;
	board[1][0]= O;
	board[2][0]= O;
	
		assertTrue(tc.isWin(O))	;
	
        }
	
	
	@Test
        public void testIsWinColumnTwo() {
	int O=-1;
	int[][] board = new int[3][3];
	board[0][1]= O;
	board[1][1]= O;
	board[2][1]= O;
	
		assertTrue(tc.isWin(O))	;
	
        }
	
	
	@Test
        public void testIsWinColumnThree() {
	int O=-1;
	int[][] board = new int[3][3];
	board[0][2]= O;
	board[1][2]= O;
	board[2][2]= O;
	
		assertTrue(tc.isWin(O))	;
	
        }
	
	@Test
	public void testIsWinRowOne() {
		int X=1;
		int[][] board = new int[3][3];
		board[0][0]= X;
		board[0][1]= X;
		board[0][2]= X;
		
			assertTrue(tc.isWin(X))	;
		
  	@Test
	public void testIsWinRowTwo() {
		int X=1;
		int[][] board = new int[3][3];
		board[1][0]= X;
		board[1][1]= X;
		board[1][2]= X;
		
			assertTrue(tc.isWin(X))	;
		
	}
	
	@Test
        public void testIsWinRowThree() {
	int X=1;
	int[][] board = new int[3][3];
	board[2][0]= X;
	board[2][1]= X;
	board[2][2]= X;
	
		assertTrue(tc.isWin(X))	;
	
}


	@Test
        public void testIsWinMainDiagonal() {
	int O=-1;
	int[][] board = new int[3][3];
	board[0][0]= O;
	board[1][1]= O;
	board[2][2]= O;
	
		assertTrue(tc.isWin(O))	;
	
        }
	
	@Test
	public void testIsAntiDiagonal() {
	int X=1;
	int[][] board = new int[3][3];
	board[2][0]= X;
	board[1][1]= X;
	board[0][2]= X;
	
		assertTrue(tc.isWin(X))	;
	
}
	
	
	
}
